#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <limits>
using namespace std;
typedef pair<int, int> Node; 
class Graph {
public:
  
    unordered_map<int, vector<pair<int, int>>> adjList; 

    void addEdge(int u, int v, int cost) {
        adjList[u].push_back({v, cost});
        adjList[v].push_back({u, cost}); 
    }

    int heuristic(int node, int goal) {
       
        return abs(node - goal);
    }

    void aStarSearch(int start, int goal) {
       
        priority_queue<Node, vector<Node>, greater<Node>> openList;
        unordered_set<int> closedList;
        unordered_map<int, int> gCost; 
        unordered_map<int, int> parent; 

        gCost[start] = 0;
        openList.push({heuristic(start, goal), start});

        while (!openList.empty()) {
            int current = openList.top().second;
            openList.pop();

            if (current == goal) {
                cout << "Goal " << goal << " found! Path: ";
                vector<int> path;
                for (int at = goal; at != start; at = parent[at]) {
                    path.push_back(at);
                }
                path.push_back(start);
                reverse(path.begin(), path.end());
                for (int node : path) {
                    cout << node << " ";
                }
                cout << endl;
                return;
            }

            if (closedList.find(current) != closedList.end()) continue;

            closedList.insert(current);

            for (auto &neighbor : adjList[current]) {
                int nextNode = neighbor.first;
                int edgeCost = neighbor.second;

                int tentativeGCost = gCost[current] + edgeCost;

                if (gCost.find(nextNode) == gCost.end() || tentativeGCost < gCost[nextNode]) {
                    gCost[nextNode] = tentativeGCost;
                    int fValue = tentativeGCost + heuristic(nextNode, goal);
                    openList.push({fValue, nextNode});
                    parent[nextNode] = current; 
                }
            }
        }

        cout << "Goal " << goal << " not reachable from start node " << start << "." << endl;
    }
};

int main() {
    Graph g;

    g.addEdge(1, 2, 1);
    g.addEdge(1, 3, 4);
    g.addEdge(2, 4, 2);
    g.addEdge(3, 4, 1);
    g.addEdge(4, 5, 3);

    g.aStarSearch(1, 5);

    return 0;
}
